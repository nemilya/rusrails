h1. Отладка утечки памяти

Приложение Ruby (на Rails или нет), может съедать память -- или в коде Ruby, или на уровне кода C.

В этом разделе вы научитесь находить и исправлять такие утечки, используя инструменты отладки BleakHouse и Valgrind.

h4. BleakHouse

"BleakHouse":http://github.com/fauna/bleak_house/tree/master Это библиотека для обнаружения утечек памяти.

Если объект Ruby не выходит за область видимости, Ruby Garbage Collector не очистит его, пока на него ссылаются где-то еще. Утечки, подобные этой, могут понемногу расти, и ваше приложение будет потреблять все больши и больше памяти, постепенно влияя на общую производительность системы. Этот инструмент поможет найти утечки в куче Ruby.

Чтобы установить его, запустите:

<shell>
$ sudo gem install bleak_house
</shell>

Затем настройте приложение для профилирования. Затем добавьте следующее в конец config/environment.rb:

<ruby>
require 'bleak_house' if ENV['BLEAK_HOUSE']
</ruby>

Запустите экземпляр сервера со встроенным BleakHouse:

<shell>
$ RAILS_ENV=production BLEAK_HOUSE=1 ruby-bleak-house rails server
</shell>

Убедитесь, что были запущены сотни запросов, чтобы получить лучшие образцы данных, затем нажмите +CTRL-C+. Сервер остановится и Bleak House создаст файл дампа в +/tmp+:

<shell>
** BleakHouse: working...
** BleakHouse: complete
** Bleakhouse: run 'bleak /tmp/bleak.5979.0.dump' to analyze.
</shell>

Чтобы его проанализировать, просто запустите команду listed. Будут отображены 20 наиболее съедающих память строк:

<shell>
  191691 total objects
  Final heap size 191691 filled, 220961 free
  Displaying top 20 most common line/class pairs
  89513 __null__:__null__:__node__
  41438 __null__:__null__:String
  2348 /opt/local//lib/ruby/site_ruby/1.8/rubygems/specification.rb:557:Array
  1508 /opt/local//lib/ruby/gems/1.8/specifications/gettext-1.90.0.gemspec:14:String
  1021 /opt/local//lib/ruby/gems/1.8/specifications/heel-0.2.0.gemspec:14:String
   951 /opt/local//lib/ruby/site_ruby/1.8/rubygems/version.rb:111:String
   935 /opt/local//lib/ruby/site_ruby/1.8/rubygems/specification.rb:557:String
   834 /opt/local//lib/ruby/site_ruby/1.8/rubygems/version.rb:146:Array
  ...
</shell>

Таким образом, можно найти, где ваше приложение съедает память, и исправить это.

Если "BleakHouse":http://github.com/fauna/bleak_house/tree/master не сообщает о каком-либо росте кучи, но у вас все равно наблюдается рост занимаемой памяти, скорее всего у вас неисправное расширение на C, или настоящая утечка в интерпретаторе. В этом случае, попробуйте использовать Valgrind для дальнейшего исследования.

h4. Valgrind

"Valgrind":http://valgrind.org/ это приложение для Linux для обнаружения утечек памяти, основанных на C, и гонки условий.

Имеются инструменты Valgrind, которые могут автоматически обнаруживать многие баги управления памятью и тредами, и подробно профилировать ваши программы. Например, расширение C в интерпретаторе вызывает +malloc()+ но не вызывает должным образом +free()+, эта память не будет доступна, пока приложение не будет остановлено.

Чтобы узнать подробности, как установить Valgrind и использовать его с Ruby, обратитесь к "Valgrind and Ruby":http://blog.evanweaver.com/articles/2008/02/05/valgrind-and-ruby/ by Evan Weaver.
